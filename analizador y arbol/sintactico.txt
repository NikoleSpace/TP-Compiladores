parser grammar DOT;
options { tokenVocab=DOTLexer; }

graph
   : STRICT? ( GRAPH | DIGRAPH ) id_? '{' stmt_list '}' EOF
   ;

stmt_list
   : ( stmt ';'? )*
   ;

stmt
   : node_stmt | edge_stmt | attr_stmt | id_ '=' id_ | subgraph
   ;

attr_stmt
   : ( GRAPH | NODE | EDGE ) attr_list
   ;

attr_list
   : ( '[' a_list? ']' )+
   ;

a_list
   : ( id_ ( '=' id_ )? ','? )+
   ;

edge_stmt
   : ( node_id | subgraph ) edgeRHS attr_list?
   ;

edgeRHS
   : ( edgeop ( node_id | subgraph ) )+
   ;

edgeop
   : '->' | '--'
   ;

node_stmt
   : node_id attr_list?
   ;

node_id
   : id_ port?
   ;

port
   : ':' id_ ( ':' id_ )?
   ;

subgraph
   : ( SUBGRAPH id_? )? '{' stmt_list '}'
   ;

id_
   : ID | STRING | HTML_STRING | NUMBER
   ;

compass_pt
   : 'n' | 'ne' | 'e' | 'se' | 's' | 'sw' | 'w' | 'nw' | 'c' | '_';
